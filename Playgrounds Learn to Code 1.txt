//Playgrounds

//Learn to Code 1

//Issuing commands

/*
moveForward()
moveForward()
moveForward()
collectGem()
*/

//Adding a New Command (lesson 2)

/*
moveForward()
moveForward()
turnLeft()
moveForward()
moveForward()
collectGem()
*/

// Toggling a Switch

/*
moveForward()
moveForward()
turnLeft()
moveForward()
collectGem()
moveForward()
turnLeft()
moveForward()
moveForward()
toggleSwitch()
*/

// Portal Practice

/*
moveForward()
moveForward()
moveForward()
turnLeft()
moveForward()
moveForward()
toggleSwitch()
moveForward()
moveForward()
turnLeft()
moveForward()
moveForward()
collectGem()
*/

// Finding and Fixing Bugs

/*
moveForward()
moveForward()
turnLeft()
moveForward()
collectGem()
moveForward()
toggleSwitch()
*/

//Bug Squash Practice

/*
moveForward()
turnLeft()
moveForward()
moveForward()
toggleSwitch()
moveForward()
moveForward()
moveForward()
moveForward()
collectGem()
*/

// The Shortest Route

/*
moveForward()
moveForward()
moveForward()
collectGem()
moveForward()
moveForward()
moveForward()
moveForward()
toggleSwitch()
*/

//Functions
//Composite a New Behaviour


/*
func goGoGo() {
    moveForward()
    moveForward()
    moveForward()
}

func turnRight() {
    turnLeft()
    turnLeft()
    turnLeft()
}

goGoGo()
turnRight()
goGoGo()
collectGem()
*//

// Creating a New Function

/*
func turnRight() {
	turnLeft()
	turnLeft()
	turnLeft()
}

//moveForward()
//turnLeft()
//moveForward()
//turnRight()
//moveForward()
//turnRight()
//moveForward()
//turnRight()
//moveForward()
//turnLeft()
//moveForward()
//toggleSwitch()

//***** Second Solution *****

//func moveAndTurnRight() {
//    moveForward()
//    turnRight()
//}

//moveAndTurnRight()
//moveAndTurnRight()
//moveForward()
//moveAndTurnRight()
//moveForward()
//moveForward()
//moveForward()
//moveAndTurnRight()
//moveForward()
//toggleSwitch()
*/

//Collect, Toggle, Repeat

/*
func moveAndCollectAndToggle() {
	moveForward()
	collectGem()
	moveForward()
	toggleSwitch()
	moveForward()
}

moveAndCollectAndToggle()
turnLeft()
moveAndCollectAndToggle()
moveForward()
turnLeft()
moveAndCollectAndToggle()
turnLeft()
moveAndCollectAndToggle()
*/

// Across the Board

/*
func collectAndMove() {
	moveForward()
	collectGem()
}

collectGem()
collectAndMove()
collectAndMove()
turnRight()
collectAndMove()
collectAndMove()
turnRight()
collectAndMove()
collectAndMove()
turnRight()
collectAndMove()
turnRight()
*/

// Nesting Patterns

/*
fun turnAround() {
	turnLeft()
	turnLeft()
}

func solveStair() {
	moveForward()
    	collectGem()
    	turnAround()
    	moveForward()
    	turnRight()
}

solveStair()
solveStair()
solveStair()
solveStair()
*/

//Slotted Stairways

/*
func collectGemTurnAround() {
	func moveForwardX2(){
        moveForward()
        moveForward()
    	}
    	func turnAround() {
        turnLeft()
        turnLeft()
    	}
    	func moveForwardX4() {
        moveForwardX2()
        moveForwardX2()
   	 }
    	moveForwardX2()
    	collectGem()
    	turnAround()
    	moveForwardX4()
    	collectGem()
    	turnAround()
    	moveForwardX2()
}

func solveRow() {
	collectGemTurnAround()
    	turnRight()
   	moveForward()
    	turnLeft()
	}

solveRow()
solveRow()
solveRow()

*/

// Treasure Hunt

/*
func moveThenToggle() {
    moveForward()
    moveForward()
    toggleSwitch()
}

func goReturn() {
    turnLeft()
    turnLeft()
    moveForward()
    moveForward()
}

moveThenToggle()
goReturn()
turnLeft()
moveThenToggle()
moveThenToggle()
goReturn()
moveForward()
moveForward()
turnLeft()
moveThenToggle()
goReturn()
turnLeft()
moveThenToggle()
moveThenToggle()

*/

//Using Loops

/*

for i in 1 ... 5 {
	moveForward()
	moveForward()
    	collectGem()
    	moveForward()
}

*/

//Looping All The Sides
	

/*

for i in 1...4 {
    moveForward()
    collectGem()
    for move in 1...3 {
        moveForward()
    }
    turnRight()
}

*/

//To the Edge and Back

/*
func way1() {
    moveForward()
    moveForward()
    turnRight()
}

func way2() {
    moveForward()
    moveForward()
    toggleSwitch()
    
}
way1()
toggleSwitch()
for f in 1...3 {
    way1()
    way2()
}

*/

//Loop Jumper

/*
for i in 1...5 {
    moveForward()
    turnLeft()
    moveForward()
    moveForward()
    collectGem()
    turnRight()
}
*/

//Branch Out

/*
func goGoGo() {
    moveForward()
    moveForward()
    turnRight()
    func moveSeven() {
        for i in 1...7 {
        moveForward()
        }
    }
    moveSeven()
    toggleSwitch()
    turnLeft()
    turnLeft()
    moveSeven()
    turnRight()
}
goGoGo()
goGoGo()
goGoGo()
*/

//Gem Farm

/*
func toggleAndCollect() {
    turnLeft()
    moveForward()
    toggleSwitch()
    moveForward()
    toggleSwitch()
    turnLeft()
    turnLeft()
    for i in 1...3 {
        moveForward()
    }
    collectGem()
    moveForward()
    collectGem()
    turnLeft()
    turnLeft()
    moveForward()
    moveForward()
    turnRight()
    moveForward()    
}
toggleAndCollect()
toggleAndCollect()
toggleAndCollect()
*/

//Four Stash Sweep

/*
func rotate() {
    turnLeft()
    turnLeft()
}
func horseStep() {
    moveForward()
    turnLeft()
    moveForward()
    collectGem()
}
for i in 1 ... 4 {
    moveForward()
    collectGem()
    turnLeft()
    moveForward()
    collectGem()
    rotate()
    horseStep()
    rotate()
    horseStep()
    moveForward()
    }
*/

//Checking for Switches

/*
moveForward()
moveForward()
for i in 1...3 {
    if isOnClosedSwitch {
    toggleSwitch()
    moveForward()
    } else {
        moveForward()
    }
}
*/

//Using else if

/*
for i in 1...3 {
    if isOnGem {
        collectGem()
        moveForward()
    } else if isOnClosedSwitch {
        toggleSwitch()
        moveForward()
    } else {
        moveForward()
    }
}
*/

//Looping Conditional Code

/*
for i in 1 ... 13 {
	if isOnClosedSwitch {
        	toggleSwitch()
        	moveForward()
    	} else if isOnOpenSwitch{
        	moveForward()
    	} else if isOnGem{
        	collectGem()
        	moveForward()
    	} else {
        	moveForward()
    	}
}
*/

//Conditional Climb

/*
for i in 1 ... 16 {
    if isOnGem {
        collectGem()
        turnLeft()
    } else {
        moveForward()
    }
}
*/

//Defining Smarter Function

/*

fun collectOrToggle() {
	moveForward()
    moveForward()
    if isOnClosedSwitch {
        toggleSwitch()
    } else if isOnGem{
        collectGem()
    } else {
        moveForward()
    }
collectOrToggle()
collectOrToggle()
turnLeft()
moveForward()
moveForward()
turnLeft()
collectOrToggle()
collectOrToggle()
turnRight()
moveForward()
turnRight()
collectOrToggle()
collectOrToggle()
*/

//Boxed In

/*

func check() {
    if isOnGem {
        collectGem()
    } else if isOnClosedSwitch{
        toggleSwitch()
    } 
    
}

func moveAndCheck () {
    moveForward()
    check()
}

func moveAndCheckAndTurn () {
    moveAndCheck()
    turnLeft()
    check()
}

moveAndCheckAndTurn()
for i in 0...3 {
    moveAndCheckAndTurn()
    moveAndCheck()
}

*/

//Decision Tree

/*
func check() {
    if isOnGem {
        collectGem()
    } else if isOnClosedSwitch{
        toggleSwitch()
    }
}
func moveX3() {
    moveForward()
    check()
    turnRight()
    for i in 0...2 {
        moveForward()
    }
    turnLeft()
    moveForward()
    check()
    turnLeft()
    turnLeft()
    moveForward()
    turnRight()
    for i in 0...2 {
        moveForward()
    }
    turnRight()
}
func moveX1() {
    moveForward()
    check()
    turnLeft()
    moveForward()
    check()
    turnLeft()
    turnLeft()
    moveForward()
    turnLeft()
}
moveX3()
moveX1()
moveForward()
check()
moveX3()
moveX1()
*/

//

































































